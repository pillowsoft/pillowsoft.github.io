<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" 
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:admin="http://webns.net/mvcb/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
	<channel>
<title>My RSS Feed</title><link>http://www.pillowsoft.com/index.html</link><description>Latest News...</description><dc:language>en</dc:language><dc:creator>PillowSoft LLC</dc:creator><dc:rights>Copyright 2012&#x2c; PillowSoft LLC</dc:rights><dc:date>2014-10-14T10:25:50-04:00</dc:date><admin:generatorAgent rdf:resource="http://www.realmacsoftware.com/" />
<sy:updatePeriod>hourly</sy:updatePeriod>
<sy:updateFrequency>1</sy:updateFrequency>
<sy:updateBase>2000-01-01T12:00+00:00</sy:updateBase>
<lastBuildDate>Tue, 14 Oct 2014 11:25:29 -0400</lastBuildDate><item><title>More F#&#x2c; Xamarin.Forms and MVVM</title><dc:creator>PillowSoft LLC</dc:creator><category>Dev</category><dc:date>2014-10-14T10:25:50-04:00</dc:date><link>http://www.pillowsoft.com/blog/files/more-fsharp-xamforms-mvvm.html#unique-entry-id-9</link><guid isPermaLink="true">http://www.pillowsoft.com/blog/files/more-fsharp-xamforms-mvvm.html#unique-entry-id-9</guid><content:encoded><![CDATA[<span style="font-size:14px; "><p>Following on from my previous blog post on ReactiveProperty for MVVM, I looked to see what else might work well with Xamarin.Forms and F#. On <a href="https://github.com/fsprojects">fsprojects</a> on GitHub, exists a repo called <a href="https://github.com/fsprojects/FSharp.ViewModule">FSharp.ViewModule</a> by <a href="/span>https://github.com/ReedCopsey<span style="font-size:14px; "">Reed Copsey</a> and others. This repo has some pretty interesting code to do MVVM with F#.  For the purposes of this post and the source code, I&rsquo;m only using the FSharp.ViewModule.Core from this repo. The full view module repo, takes a little bit different approach to MVVM and is more functional. It looks great but I&rsquo;m not sure everything is ready for use in development right now. The core module seems to work very well and hence its use in this demo.</p>

<p>With the core module I created a small Xamarin.Forms forms project, that contains a tab page controller with three tabs. The first tab is the tip calculator from my previous blog post. The second tab is a port of a simple color editor from a Xamarin.Forms C# example. The third is a port from the Xamarin.Forms-Monkeys application by <a href="https://github.com/jamesmontemagno/Xamarin.Forms-Monkeys">James Montemagno</a>.  This app shows creating and binding various forms to view models and UI in code. At present, I am not using XAML, as I like the ability to use the full language features in describing my user interface. I also borrowed some other code to create a simple view module to view look up factory, that we will use for view model navigation.</p>

<p>I think the approach that the FSharp.ViewModule.Core takes makes for very clean looking view models.  If you look at the tip calculator example below, you&rsquo;ll see that we basically create, through a small factory, the backing fields and the initial values for them. We then create property members with getters and setters as wrappers around these.  At this point, writing to any of these property members will automatically invoke the INotifyProperty change event,  allowing us to bind them to controls in the Xamarin.Forms.</p>

<p>A slick feature of the view module core,  is it you can create dependent properties.  These remind me a bit of computed observables in knockout-JS.  Essentially you describe what properties another property is dependent on, and when any of those properties change, that property is updated. In the tip calculator example, this allows us to update the tip amount and the total, based on changes in properties that are used in their calculation. I think this code looks very straightforward to read using that technique.
</span>
<br><br>
<code data-gist-id="c2cf1c3f7c9dc2ffa9a4"></code><span style="font-size:14px; ">
</span><br>
<span style="font-size:14px; ">
The view module core, also supports commands and commands dependent on properties. I&rsquo;m not actually using that feature in here at present but there are a couple of lines of code in that view module, which I will hook up in the next blog post.</p>

<p>Before I started writing this demo, I attempted to get <a href="https://github.com/reactiveui/ReactiveUI">ReactiveUI</a> working with F#. Unfortunately, there is a wee bit of impedance mismatch between ReactiveUI and #, due to heavy use of C# lambda functions and lambda expressions. This requires writing wrappers for most of its methods to make them easier to use. I will revisit that in the future. For now, using the view module core, you can get going quickly and still add in reactive UI features, as anything that emits an event (like our view model properties), in F#, is automatically an observable. I will update this demo with some examples of that soon.</p>

<p>You can find the code for this demo application <a href="https://github.com/pillowsoft/FSharpXamFormsViewModelDemo">here</a>. </p>
</span>]]></content:encoded></item><item><title>F#&#x2c; Xamarin.Forms and Reactive UI</title><dc:creator>PillowSoft LLC</dc:creator><category>Dev</category><dc:date>2014-10-06T11:58:50-04:00</dc:date><link>http://www.pillowsoft.com/blog/files/fsharp-xamforms-rx-ui.html#unique-entry-id-8</link><guid isPermaLink="true">http://www.pillowsoft.com/blog/files/fsharp-xamforms-rx-ui.html#unique-entry-id-8</guid><content:encoded><![CDATA[F# is finally getting to be pretty useful for mobile development with Xamarin Studio. Here&rsquo;s a look at how to use it along with Reactive Extensions for FRP (Functional Reactive Programming).]]></content:encoded></item><item><title>Cutting The Cord</title><dc:creator>PillowSoft LLC</dc:creator><category>General</category><dc:date>2012-08-16T23:46:35-04:00</dc:date><link>http://www.pillowsoft.com/blog/files/88affdebcafb975045a2c319e1110fc4-2.html#unique-entry-id-2</link><guid isPermaLink="true">http://www.pillowsoft.com/blog/files/88affdebcafb975045a2c319e1110fc4-2.html#unique-entry-id-2</guid><content:encoded><![CDATA[With the ever increasing speeds of cable internet and the ever increasing price of cable TV, many are looking at "cutting the cord". The idea is to ditch your cable TV service and get your video via the internet. There are many ways to do it, but here's the one I use.]]></content:encoded></item><item><title>All Ideas Have Ancestors</title><dc:creator>PillowSoft LLC</dc:creator><category>General</category><dc:date>2012-09-19T23:46:04-04:00</dc:date><link>http://www.pillowsoft.com/blog/files/d5a79b4e1e72d7a938a130e26c60582b-1.html#unique-entry-id-1</link><guid isPermaLink="true">http://www.pillowsoft.com/blog/files/d5a79b4e1e72d7a938a130e26c60582b-1.html#unique-entry-id-1</guid><content:encoded><![CDATA[<span style="font-size:14px; ">Check out these wonderfully done videos on "Everything Is A Remix".  They are short, but fascinating to watch and to the point:<br /></span>]]></content:encoded></item><item><title>Amazon S3 Web Hosting</title><dc:creator>PillowSoft LLC</dc:creator><category>Dev</category><dc:date>2012-09-09T20:22:23-04:00</dc:date><link>http://www.pillowsoft.com/blog/files/4230ac25506b5dc9e928273003922d43-0.html#unique-entry-id-0</link><guid isPermaLink="true">http://www.pillowsoft.com/blog/files/4230ac25506b5dc9e928273003922d43-0.html#unique-entry-id-0</guid><content:encoded><![CDATA[Recently I decided to move my website and blog to a static website setup. I had originally investigated using GitHub pages with Jekyll. While that seemed to work pretty well, it didn't give me all the flexibility I wanted. A bit more searching led to Amazon S3 as a good alternative.]]></content:encoded></item></channel>
</rss>